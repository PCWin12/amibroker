_SECTION_BEGIN("S_BETA");
SetBarsRequired(1250,0);

#include <SAM.afl>

//Optimize
a1 = Optimize("A1",7.4, 1, 8, 0.2); 
p1 = Optimize("P1",15, 1, 50, 2); 
Cutoff = 10;//Optimize("Cutoff",10, 1, 20, 2); 
snrlevel = 4;//Optimize("SNR",4, 4, 14, 0.5); 


// CyclePeriod
Med = (H+L)/2;
pds = sbDC(Med);


//Rules
//SAM
Band = 0;
Filt1 = SmoothedAdaptiveMomentum(Med, Cutoff, pds*p1);

//SNR
SNR = sbSNR(Med);

//Buy/Sell Rules
myBuy = Filt1 > 0 AND SNR > snrlevel;
myShort  = Filt1 < 0 AND SNR > snrlevel;

bi = BarIndex();
arrayitem = SelectedValue( bi ) - bi[ 0 ]; 
pdsindex = IIf(pds[arrayitem]>0, pds[arrayitem], 5);

stoplong = scAtrBandLong(H,a1*ATR(pdsindex));
stopshort = scAtrBandShort(L,a1*ATR(pdsindex));
myCover = Cross(Med,stopshort);
mySell = Cross(stoplong,med);

Cover = ExRem(myCover ,myShort);
Sell = ExRem(mySell, myBuy);
Buy =  myBuy;
Short = myShort;

//Plots
//---------------------------------------------
SetChartOptions(0,chartShowArrows|chartShowDates);
_N(Title = StrFormat("{{NAME}} - {{INTERVAL}} {{DATE}} Open %g, Hi %g, Lo %g, Close %g (%.1f%%) ModATR %g {{VALUES}} DCycle %g", O, H, L, C, SelectedValue( ROC( C, 1 ) ), a1*ATR(pdsindex), pdsindex ));Plot( C, "Close", ParamColor("Color", colorBlack ), styleNoTitle | ParamStyle("Style") | GetPriceStyle() ); 
Plot(stoplong, "", 3, 1);
Plot(stopshort, "", 9, 1);


//PlotShapes( Buy * shapeSmallCircle, colorGreen );
//PlotShapes( Short * shapeSmallCircle, colorRed,0, Graph0, 12  );
PlotShapes( Sell  * shapeCircle, 3 );
PlotShapes( Cover * shapeCircle, 9, 0, Graph0, 12 );
//---------------------------------------------

//System Tests
SetTradeDelays(1,1,1,1);
BuyPrice = O;
SellPrice = O;
// Set the number of positions.
NumberPositions = 10;
SetOption("MaxOpenPositions", NumberPositions);
// Allocate available funds equally among them.
PositionSize = -200 / NumberPositions;
Lookback = 5;
PositionScore = -ROC(C,Lookback);

Filter = 1;
AddColumn( BarCount, "Bars", 1.0 );

//Work out the growth rate
SetCustomBacktestProc("");

if (Status("action") == actionPortfolio)
{
	bo = GetBacktesterObject();

	bo.backtest();

	st = bo.getperformancestats(0);

	expectancy = st.getvalue("AllAvgProfitLossPercent") ;

	ntrades = 1/ (st.getvalue("AllAvgBarsHeld") / 252); 
  	growth = 1 + expectancy;
   	bo.addcustommetric("TpY", ntrades );
	bo.addcustommetric("R", expectancy );

	}
_SECTION_END();