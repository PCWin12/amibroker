//New code from Ramon Cummins via cssanalytics

function PercentRank( Data, Periods )

{
	Count = 0;
    for ( i = 1; i < Periods ; i++ )
    {
         Count = Count + ( Data > Ref( Data, -i ) );
    }
    return 100 * Count / (Periods-1);
}

 


//PERCENT_RANK determines a percentile rank by setting the lowest value 
//(that is, the first row returned by the query) 
//equal to 0 AND assigning all the remaining rows with this formula:
//
//(n-1)/(m-1) where n is the nth row in a partition of m records.

//My OLD CODE 20091110
/*
function InsertionSort(A)
{
	for (i = 1; i < BarCount; i++)
	{
		Value = A[i];
		j = i-1;
	
		while (j >= 0 AND A[j] > Value)
		{
			A[j+1] = A[j];
			j = j -1;
		} 

		A[j+1] = Value;	
	}	
	
	return A;

}

function downheap(A, x, n)
    {
		
        w=2*x+1;    // first descendant of x
		done = 0;
        while (w<n AND done <1)
        {
            if (w+1<n)    // is there a second descendant?
				{
                if (a[w+1]>a[w])
						 w++;
				}
            // w is the descendant of x with maximum label

            if (a[x]>a[w])
				 done=1;  // v has heap property
         else
				{
            	// exchange labels of x and w
				t=a[x];
        		a[x]=a[w];
        		a[w]=t;

				x=w;        // continue
              w=2*x+1;
				}
        }

		return A;
    }


    function HeapSort(A, Lookback)
    {
        //build heap;
		n = BarCount -1;
		for ( x=int(n/2-1); x>=(BarCount-1-Lookback); x--)
          A = downheap (A, x, n);

        while (n>0)
        {
            t=a[0];
        		a[0]=a[n];
        		a[n]=t;

            A = downheap (A, BarCount-1-Lookback, n);

			 n--;
        } 

		return A;
    }

function binarySearch(A, first, upto, key) {

//A must be sorted
    done = 0;
    while (first < upto AND done < 1) {
        mid = int((first + upto) / 2);  // Compute mid point.
        if (key < A[mid]) {
            upto = mid;     // repeat search in bottom half.
        } else if (key > A[mid]) {
            first = mid + 1;  // Repeat search in top half.
        } else {
            done =1;     // Found it. return position
        }
    }
    return mid;    // Failed to find key
}


function PercentRank(A, Lookback)
{

//	SetBarsRequired(50000,0); //force max barcount

	S = heapsort(Nz(A), Lookback);
	R[0] = 0;
	for (i = BarCount-1; i > (BarCount-1-Lookback); i--)
	{
			
			index = BinarySearch(S, 0, BarCount-1, A[i]);
			R[i] = (index-1)/(BarCount -1);
	}

		
	return R;

}

*/