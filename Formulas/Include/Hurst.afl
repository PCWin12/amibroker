/*
Hurst Constant is what mathematicians call "dependence" - which simply means that what is going to happen next 
depends on what happened before. "H" = Hurst. if the H factor was 0.5, then the prices exhibited a Random pattern. 
But, if the H factor was greater than 0.5, Say .75, then the prices had trends AND that they did NOT fluctuate randomly. 
Prices tended to persist in one direction much longer than would be predicted by a Random process. if the H were less than .5, 
Say .2, then this meant that prices tended to new closely to some mean, it meant that they did NOT roam very far. 
Thats what this Indicator actually does.
*/

/*HURST formula*/
function HurstValue(P) {
Bars = 600;
FR1 = log(Sum(abs( P - Ref(P,-1)),Bars));
FR2 = log(Sum(IIf(  (Cum(1)/2 - int(Cum(1)/2) ) == 0,abs(P - Ref(P,-2)  ),0),Bars));
FR3 = log(Sum(IIf(  (Cum(1)/3 - int(Cum(1)/3) )  == 0,abs(P-Ref(P,-3)  ),0),Bars));
FR4 = log(Sum(IIf(  (Cum(1)/4 - int(Cum(1)/4) ) == 0,abs(P-Ref(P,-4)  ),0),Bars));
FR5 = log(Sum(IIf( (Cum(1)/5 - int(Cum(1)/5)  ) == 0,abs( P - Ref(P,-5)  ),0),Bars));
FR6 = log(Sum(IIf(  (Cum(1)/6 - int(Cum(1)/6) ) == 0,abs( P - Ref(P,-6)  ),0),Bars));
FR10 = log(Sum(IIf(  (Cum(1)/10 - int(Cum(1)/10) ) == 0,abs(P - Ref(P,-10)  ),0),Bars));
FR20 = log(Sum(IIf(  (Cum(1)/20 - int(Cum(1)/20) ) == 0,abs(P - Ref(P,-20) ),0),Bars));
FR30 = log(Sum(IIf(  (Cum(1)/30 - int(Cum(1)/30) ) == 0,abs(P - Ref(P,-30)  ),0),Bars));
FR40 = log(Sum(IIf(  (Cum(1)/40 - int(Cum(1)/40) ) == 0,abs(P - Ref(P,-40)  ),0),Bars));
FR50 = log(Sum(IIf(  (Cum(1)/50 - int(Cum(1)/50) ) == 0,abs( P - Ref(P,-50) ),0),Bars));
FR60 = log(Sum(IIf(  (Cum(1)/60 - int(Cum(1)/60) ) == 0,abs(P - Ref(P,-60)  ),0),Bars));
SOMXY = FR2*log(2)+FR3*log(3)+FR4*log(4)+FR5*log(5)+FR6*log(6)+FR10*log(10)+FR20*log(20)+FR30*log(30)+FR40*log(40)+FR50*log(50)+FR60*log(60);
SOMX = log(2)+log(3)+log(4)+log(5)+log(6)+log(10)+log(20)+log(30)+log(40)+ log(50)+log(60);
SOMY =  FR1+FR2+FR3+FR4+FR5+FR6+FR10+FR20+FR30+FR40+FR50+FR60;
SOMX2 = (log(2)^2)+(log(3)^2)+(log(4)^2)+(log(5)^2)+(log(6)^2) +(log(10)^2)+(log(20)^2)+(log(30)^2)+(log(40)^2)+(log(50)^2)+ (log(60)^2);
HURST= 1+((12*SOMXY-SOMX*SOMY)/(12*SOMX2 - (SOMX^2)));
return HURST;
}
//Graph1 = HURST;
//Graph0 = LIM;
//Graph2=0.5;
//Graph2Style=styleThick;
//Graph2Color=5;
function HurstLimit(array) {
Bars = 600;
return LastValue(Cum(array)/(Cum(1)-Bars-60));
}