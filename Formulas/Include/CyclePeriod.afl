     // Ehler's Dominant Cycle Period
       // Cybernetic Analysis for Stocks and Futures
       // Chapter 9, p. 107. Code on p. 111.

       function CyclePeriod(price, alpha)
       {
        instperiod = deltaphase = cycle = period = 0;
        Cycle = ( price[2] - 2*price[1] + price[0] )/4;   //initialise arrays
        smooth = ( price + 2*Ref(price,-1) + 2*Ref(price,-2) + Ref(price,-3) )/6;

        for (i=6 ; i<BarCount ; i++)
         {
          Cycle[i] = (1-alpha/2)^2 * ( smooth[i] - 2*smooth[i-1] 
						+ smooth[i-2] ) + 2*(1-alpha)*Cycle[i-1] - (1-alpha)^2*Cycle[i-2];

          Q1[i] = (.0962*cycle[i] + .5769*cycle[i-2] -.5769*cycle[i-4] 
						- .0962*cycle[i-6])*(.5 + .08*InstPeriod[i-1]);
          I1[i] = cycle[i-3];

          if(Q1[i] != 0 AND Q1[i-1] != 0)
          		DeltaPhase[i] = (I1[i]/Q1[i] - I1[i-1]/Q1[i-1])/(1 + I1[i] *I1[i-1]/(Q1[i]*Q1[i-1]));
          //limit Delta Phase High/Low (0.09rads = 69bars, 1.1rads = 6bars...per page 117)
          if(DeltaPhase[i] < 0.09)
           DeltaPhase[i] = 0.09;
          if(DeltaPhase[i] > 1.1)
           DeltaPhase[i] = 1.1;

          //---Begin median calculation (placed inline for speed).
          //Hardcoded as length=5 as higher values would be out of range due to start-up period in main loop
          for(k=4; k>=0; k--)
           { temparray[k] = DeltaPhase[i-k]; } //create new array with last 5 values of DeltaPhase
          temp = 0;
          for(k=4; k>0; k--)  //this series of loops re-organises temparray into ascending order
          { for (j=4; j>0; j--)
            { if (temparray[j-1] > temparray[j]) //swap values in array if previous value is greater
              { temp = temparray[j-1];
                temparray[j-1] = temparray[j];
                temparray[j] = temp;
          }}}
          MedianDelta[i] = temparray[2]; //returns the middle (third) element of temparray
          //---End median calculation

          DC[i] = Nz( 6.28318 / MedianDelta[i] + .5, 15 );

          InstPeriod[i] = .33*DC[i] + .67*InstPeriod[i-1];
          Period[i] = .15*InstPeriod[i] + .85*Period[i-1];
          }
        for (i=0; i<7; i++)
         { Period[i] = 1; }
        return Period;
       }
